import Head from "next/head";
import Navigation from "./navigation";
import MetaMaskOnboarding from "@metamask/onboarding";
import detectEthereumProvider from "@metamask/detect-provider";
import { useState, useEffect, useRef } from "react";
import {
  connectWallet,
  disconnectWallet,
  getUserAccounts,
} from "../services/blockApi.service";
import { ethers } from "ethers";
import Alert from "./alert";

const Layout = ({ children }) => {
  // STATE
  const [address, setAddress] = useState("");
  const [chainId, setChainId] = useState("");
  const [network, setNetwork] = useState("");
  const [provider, setProvider] = useState();
  const [signer, setSigner] = useState();
  const [alert, setAlert] = useState({
    type: "error",
    message: " HEY THIS IS ERROR",
  });
  // EFFECTS
  useEffect(async () => {
    let ethProvider = await detectEthereumProvider();
    if (ethProvider.isConnected() && localStorage.getItem("connected")) {
      let accountObj = await getUserAccounts(ethProvider);
      if (accountObj) {
        setAddress(accountObj.address);
        setChainId(accountObj.chainId);
        setNetwork(accountObj.network);
        console.log("uesEffect obj: ", accountObj);
      }
    }
    // LISTENER EVENTS
    ethereum.on("accountsChanged", () => {
      window.location.reload();
    });
    ethereum.on("chainChanged", (newChain) => {
      window.location.reload();
    });
    // CLEANUP EVENTS
    ethereum.removeListener("chainChanged", () => {
      window.location.reload();
    });
    ethereum.removeListener("accountsChanged", () => {
      window.location.reload();
    });
  }, []);

  // HANDLERS
  const handleConnect = async () => {
    let accountObj = await connectWallet();
    if (accountObj) {
      setAddress(accountObj.address);
      setChainId(accountObj.chainId);
      setNetwork(accountObj.network);
    }
    window.location.reload();
  };

  const handleDisconnect = async () => {
    await disconnectWallet();
    window.location.reload();
  };

  return (
    <>
      <Head>
        <title>NextWind</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Navigation
        handleConnect={handleConnect}
        address={address}
        handleDisconnect={handleDisconnect}
      />
      <main className="mx-auto">
        {/* use <section> tags in page level to seperate content */}
        {children}
        {/* EXAMPLE CONTENT STRUCTURE - section > div.container  */}
        <section>
          <div className="container mx-auto">
            {address > 0 && <p>address: {address}</p>}
            {chainId && <p>chainId: {chainId}</p>}
            {network && <p>network: {network}</p>}
            {/* {message && <p>STATUS MESSAGE: {message}</p>} */}
          </div>
        </section>
        {alert && <Alert alertObj={alert} />}
      </main>
    </>
  );
};

export default Layout;
